{"version":3,"sources":["../../../src/core/image.js"],"names":["log","require","getLogger","_setImageOverlay","item","overlays","_","isArray","cloneDeep","forEach","el","overlay","_overlays","id","xy","get","size","rh","renderOverlay","call","url","layer","setUrl","isNil","opacity","setOpacity","x0","x","y0","y","x1","width","y1","height","bounds","setBounds","_removeImageOverlay","filter","removed","isString","dh","isValidArgType","includes","isPlainObject","isMatch","omit","isFunction","key","isEmpty","toArray","warn","ERROR","INVALID_ARGS","_map","removeLayer"],"mappings":"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","sourcesContent":["/**\r\n * Image overlay related functions.\r\n *\r\n * @file   This file is the collection of overlay-related functions.\r\n * @author Liszt\r\n */\r\n\r\nimport _ from 'lodash'\r\n\r\nimport dh from '../utils/data-helper'\r\nimport rh from '../utils/render-helper'\r\nimport {GIS_ERROR as ERROR} from '../utils/gis-exception'\r\n\r\nlet log = require('loglevel').getLogger('gis/core/image')\r\n\r\n/**\r\n * Creates/updates the overlayes.\r\n *\r\n * @param   {Object | Object[]}    item     Overlay configs to be created or updated. Formatted as {id, url, xy, size:{width, height}, opacity, zoom}\r\n *\r\n */\r\nexport function _setImageOverlay(item) {\r\n    const overlays = _.isArray(item) ? _.cloneDeep(item) : [_.cloneDeep(item)]\r\n\r\n    /*\r\n        el = {id, url, xy, size:{width, height}, opacity, zoom}\r\n        id is the overlay's id. If undefined and the overlay is new, randomly create one for it.\r\n        url and xy are required for new overlay\r\n\r\n        url is the image path\r\n        xy is the start point in the container\r\n        zoom is the minimum level which the overlay will display\r\n    */\r\n    _.forEach(overlays, el => {\r\n        const overlay = this._overlays[el.id]\r\n        const xy = _.get(el, 'xy', null)\r\n        const size = _.get(el, 'size', null)\r\n\r\n        if (!overlay) {\r\n            rh.renderOverlay.call(this, el)\r\n        }\r\n        else {\r\n            el.url && overlay.layer.setUrl(el.url)\r\n            !_.isNil(el.opacity) && overlay.layer.setOpacity(el.opacity)\r\n\r\n            // Translate the overlay if specified xy or size\r\n            if (xy || size) {\r\n                const x0 = _.get(xy, 'x', overlay.xy.x)\r\n                const y0 = _.get(xy, 'y', overlay.xy.y)\r\n                const x1 = x0 + _.get(size, 'width', overlay.size.width)\r\n                const y1 = y0 + _.get(size, 'height', overlay.size.height)\r\n\r\n                const bounds = [[y0, x0], [y1, x1]]\r\n\r\n                overlay.layer.setBounds(bounds)\r\n\r\n                this._overlays[el.id].xy = xy || this._overlays[el.id].xy\r\n                this._overlays[el.id].size = size || this._overlays[el.id].size\r\n                this._overlays[el.id].opacity = !_.isNil(el.opacity) ? el.opacity : this._overlays[el.id].opacity\r\n            }\r\n        }\r\n    })\r\n\r\n    return this\r\n}\r\n\r\n/**\r\n * Removes the overlayes which match the filter.\r\n *\r\n * @param   {String | String[] | Object | Function}    filter     Filter of overlays to be removed. If undefined, remove all overlays.\r\n *\r\n */\r\nexport function _removeImageOverlay(filter) {\r\n    const overlays = this._overlays\r\n    let removed = []\r\n\r\n    if (_.isString(filter)) {\r\n        // Use id to find\r\n        removed = _.filter(overlays, ({id}) => id === filter)\r\n    }\r\n    else if (dh.isValidArgType(filter, [['string']])) {\r\n        // Use ids[] to find\r\n        removed = _.filter(overlays, ({id}) => _.includes(filter, id))\r\n    }\r\n    else if (_.isPlainObject(filter)) {\r\n        // Use attributes, like id/zoom/opacity/... (except 'layer'), to find overlays\r\n        removed = _.filter(overlays, el => _.isMatch(el, _.omit(filter, 'layer')))\r\n    }\r\n    else if (_.isFunction(filter)) {\r\n        // Use filter function which return boolean to find overlays to be removed\r\n        removed = _.filter(overlays, (el, key) => filter(el, key, overlays))\r\n    }\r\n    else if (_.isNil(filter) || _.isEmpty(filter)) {\r\n        removed = _.toArray(overlays)\r\n    }\r\n    else {\r\n        log.warn(ERROR.INVALID_ARGS, filter, 'Filter should be String, String[], Object, or Function')\r\n        return this\r\n    }\r\n\r\n    _.forEach(removed, ({id, layer}) => {\r\n        this._map.removeLayer(layer)\r\n        delete this._overlays[id]\r\n    })\r\n\r\n    return this\r\n}\r\n\r\nexport default {\r\n    _setImageOverlay,\r\n    _removeImageOverlay\r\n}"],"file":"image.js"}