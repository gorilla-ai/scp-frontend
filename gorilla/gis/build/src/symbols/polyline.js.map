{"version":3,"sources":["../../../src/symbols/polyline.js"],"names":["log","require","getLogger","DEFAULT_PATTERN","offset","repeat","sign","type","pixelSize","polygon","Polyline","id","props","selected","selectedProps","options","_getInitialStyle","decorator","_patterns","_","isEmpty","patterns","pattern","omit","symbol","pathOptions","merge","L","Symbol","arrowHead","push","map","el","isNil","patternOpt","set","TRACK_PANE","includes","warn","ERROR","INVALID_TYPE","cloneDeep","marker","pick","_layer","polyline","latlng","directed","_getPatterns","polylines","decorators","forEach","_props","idx","clct","length","layer","polylineDecorator","_decorator","featureGroup","concat","eachLayer","lyr","_gis_id","_id","prevProps","nextProps","style","STYLE_DICT","isEqual","setLatLngs","setStyle","PolylineDecorator","setPaths","setPatterns","tooltip","_updateInfo","INFO_TYPE","TOOLTIP","popup","setInfo","POPUP","GisSymbol"],"mappings":"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","sourcesContent":["import _ from 'lodash'\r\nimport L from 'leaflet'\r\nimport 'leaflet-polylinedecorator'\r\nimport GisSymbol from './symbol'\r\nimport {INFO_TYPE, STYLE_DICT, TRACK_PANE} from '../consts/dictionary'\r\nimport {GIS_ERROR as ERROR} from '../utils/gis-exception'\r\n\r\nlet log = require('loglevel').getLogger('gis/symbols/polyline')\r\n\r\nconst DEFAULT_PATTERN = {\r\n    offset: '100%',\r\n    repeat: 0,\r\n    sign: {\r\n        type: 'arrow',\r\n        pixelSize: 15,\r\n        polygon: false\r\n    }\r\n}\r\n\r\n/**\r\n * A Polyline symbol, inherits from class Symbol.\r\n *\r\n * @see     Symbol\r\n * @link    https://git.gorilla-technology.com/gorilla/gis/blob/master/docs/symbol.md\r\n * @link    https://git.gorilla-technology.com/gorilla/gis/blob/master/docs/polyline.md\r\n *\r\n * @class\r\n * @param {String}  id              The polyline symbol id.\r\n * @param {Object}  props           The properties of the polyline.\r\n * @param {Boolean} selected        The selected status.\r\n * @param {Boolean} selectedProps   Properties will apply when symbol is selected.\r\n */\r\nclass Polyline extends GisSymbol {\r\n    constructor(id, props, selected, selectedProps) {\r\n        super(id, 'polyline', props, selected, selectedProps)\r\n        // supported props other than leaflet options: tooltip, popup, latlng, label, icon\r\n    }\r\n\r\n    /*\r\n     * Forms the patterns props according to polyline props.\r\n     *\r\n     * @param {Object} props    The polyline props.\r\n     *\r\n     * @return {Object[]}       The props of patterns.\r\n     */\r\n    _getPatterns(props) {\r\n        const options = this._getInitialStyle(props)\r\n        let decorator = null\r\n        this._patterns = []\r\n\r\n        if (_.isEmpty(props.patterns)) {\r\n            const pattern = {\r\n                ..._.omit(DEFAULT_PATTERN, 'sign'),\r\n                symbol: {\r\n                    ...DEFAULT_PATTERN.sign,\r\n                    pathOptions: _.merge({}, options, DEFAULT_PATTERN.sign.pathOptions)\r\n                }\r\n            }\r\n\r\n            decorator = [{\r\n                ..._.omit(pattern, 'symbol'),\r\n                symbol: L.Symbol.arrowHead(pattern.symbol)\r\n            }]\r\n\r\n            this._patterns.push(pattern)\r\n        }\r\n        else {\r\n            decorator = _.map(props.patterns, el => {\r\n                const sign = _.isNil(el.sign)\r\n                            ? _.omit(DEFAULT_PATTERN.sign, 'type')\r\n                            : _.omit(el.sign, 'type')\r\n\r\n                const type = (_.isNil(el.sign) || _.isNil(el.sign.type))\r\n                            ? DEFAULT_PATTERN.sign.type\r\n                            : el.sign.type\r\n\r\n                let pattern = null\r\n                let patternOpt = null\r\n\r\n                if ((type === 'arrow') || (type !== 'marker')) {\r\n                    patternOpt = {\r\n                        ...sign,\r\n                        pathOptions: _.merge({}, options, sign.pathOptions)\r\n                    }\r\n\r\n                    _.set(patternOpt, 'pathOptions.pane', TRACK_PANE)\r\n                    pattern = L.Symbol.arrowHead(patternOpt)\r\n\r\n                    if (!_.includes(['arrow', 'marker'], type)) {\r\n                        log.warn(\r\n                            ERROR.INVALID_TYPE,\r\n                            type,\r\n                            'The directed polyline pattern type should be \\'arrow\\' or \\'marker\\''\r\n                        )\r\n                    }\r\n                }\r\n                else if (type === 'marker') {\r\n                    patternOpt = _.cloneDeep(sign)\r\n                    _.set(patternOpt, 'pane', TRACK_PANE)\r\n\r\n                    pattern = L.Symbol.marker(patternOpt)\r\n                }\r\n\r\n                this._patterns.push({\r\n                    ..._.pick(el, ['offset', 'endOffset', 'repeat']),\r\n                    symbol: patternOpt\r\n                })\r\n\r\n                return {\r\n                    ..._.pick(el, ['offset', 'endOffset', 'repeat']),\r\n                    symbol: pattern\r\n                }\r\n            })\r\n        }\r\n\r\n        return decorator\r\n    }\r\n\r\n    /*\r\n     * Creates the leaflet polyline instance; if directed, create a leaflet feature group store all separated lines and pattern.\r\n     *\r\n     * @param {Object} props                    The polyline props.\r\n     *\r\n     * @return {L.Polyline | L.FeatureGroup}    The created leaflet polyline instance; if directed, return the leaflet feature group instance.\r\n     */\r\n    _createLayer(props) {\r\n        const options = this._getInitialStyle(props)\r\n\r\n        this._layer = L.polyline(props.latlng, options)\r\n\r\n        // Fix issue #11. Add default pattern\r\n        if (props.directed) {\r\n            const patterns = this._getPatterns(props)\r\n\r\n            // Make the sign(e.g., arrow) shown beside each symbol\r\n            const polylines = []\r\n            const decorators = []\r\n            _.forEach(this._props.latlng, (el, idx, clct) => {\r\n                if (idx < clct.length-1) {\r\n                    const layer = L.polyline([el, clct[idx+1]], options)\r\n                    polylines.push(layer)\r\n                    decorators.push(L.polylineDecorator(layer, { patterns }))\r\n                }\r\n            })\r\n\r\n            this._decorator = decorators\r\n            // Fix issue #8. Use featureGroup to group polyline and decorator so that it can bind events\r\n            this._layer = L.featureGroup(_.concat(polylines, decorators))\r\n\r\n            // Make the _eventCore can catch the symbol id if polyline layer is featureGroup\r\n            this._layer.eachLayer(lyr => {\r\n                lyr._gis_id = this._id\r\n            })\r\n        }\r\n\r\n        return this._layer\r\n    }\r\n\r\n    /*\r\n     * Updates the leaflet polyline/featureGroup instance.\r\n     * If polyline symbol is directed, new props, e.g., color, will apply to all separated lines and patterns.\r\n     *\r\n     * @param {Object} prevProps                The original props.\r\n     * @param {Object} mextProps                The new props to apply.\r\n     *\r\n     * @return {L.Polyline | L.FeatureGroup}    The updated leaflet polyline/featureGroup instance.\r\n     */\r\n    _updateLayer(prevProps, nextProps) {\r\n        // Props like tooltip, popup, and label, can't be set by setStyle\r\n        const style = _.pick(nextProps, STYLE_DICT)\r\n\r\n        if (!_.isEmpty(style)) {\r\n            // Fix issue #11\r\n            if (!this._props.directed) {\r\n                // Set the location\r\n                if (!_.isEqual(prevProps.latlng, nextProps.latlng)) {\r\n                    this._layer.setLatLngs(nextProps.latlng)\r\n                }\r\n\r\n                this._layer.setStyle(style)\r\n            }\r\n            else {\r\n                const patterns = this._getPatterns(nextProps)\r\n\r\n                this._layer.eachLayer(lyr => {\r\n                    if (!_.isEqual(prevProps.latlng, nextProps.latlng)) {\r\n                        if (lyr instanceof L.Polyline) {\r\n                            lyr.setLatLngs(nextProps.latlng)\r\n                        }\r\n                        else if (lyr instanceof L.PolylineDecorator) {\r\n                            lyr.setPaths(nextProps.latlng)\r\n                        }\r\n                    }\r\n\r\n                    if (lyr instanceof L.Polyline) {\r\n                        lyr.setStyle(style)\r\n                    }\r\n                })\r\n\r\n                _.forEach(this._decorator, el => {\r\n                    el.setPatterns(patterns)\r\n                })\r\n            }\r\n        }\r\n\r\n        // Set tooltip\r\n        if (!_.isNil(this._props.tooltip) && !_.isNil(nextProps.tooltip)) {\r\n            this._updateInfo(INFO_TYPE.TOOLTIP, prevProps.tooltip, nextProps.tooltip)\r\n        }\r\n\r\n        // Set popup\r\n        if (!_.isNil(this._props.popup) && !_.isNil(nextProps.popup)) {\r\n            this.setInfo(INFO_TYPE.POPUP, nextProps.popup)\r\n        }\r\n\r\n        return this._layer\r\n    }\r\n}\r\n\r\nexport default Polyline"],"file":"polyline.js"}