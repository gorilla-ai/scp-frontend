{"version":3,"sources":["../../../src/symbols/symbol.js"],"names":["log","require","getLogger","GisSymbol","id","type","props","selected","selectedProps","_id","_type","_props","_selected","_selectedProps","_layer","setLayer","_gis_id","set","_","merge","defaultStyle","DEFAULT_SYMBOL_STYLE","fill","SYMBOL_TYPE","POLYLINE","EXTRA_SYMBOL_TYPE","TRACK","defaultSltStyle","DEFAULT_SYMBOL_SLT_STYLE","latlng","newProps","omitBy","isNil","value","className","chain","_origType","split","uniq","join","_createLayer","isEqual","currentProps","_updateLayer","_mapToAdd","bringToFront","toggleClassFunc","L","DomUtil","addClass","removeClass","isGeoJSON","GeoJSON","isDirected","directed","eachLayer","lyr","forEach","_layers","l","_path","Polyline","lg","p","info","includes","INFO_TYPE","hasInfo","upperFirst","_createInfo","_updateInfo","warn","GIS_ERROR","INVALID_TYPE","TOOLTIP","POPUP","initProps","pick","STYLE_DICT","layer","prevProps","nextProps","style","setLatLngs","setStyle","tooltip","popup","content","options","setContent"],"mappings":"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","sourcesContent":["import _ from 'lodash'\r\nimport L from 'leaflet'\r\nimport cx from 'classnames'\r\n\r\nimport {INFO_TYPE, STYLE_DICT, SYMBOL_TYPE, EXTRA_SYMBOL_TYPE} from '../consts/dictionary'\r\nimport {DEFAULT_SYMBOL_STYLE, DEFAULT_SYMBOL_SLT_STYLE} from '../consts/style'\r\nimport {GIS_ERROR} from '../utils/gis-exception'\r\n\r\nlet log = require('loglevel').getLogger('gis/symbols/symbol')\r\n\r\n/**\r\n * A GIS base module, which displays a feature on the map.\r\n *\r\n * @class\r\n * @param {String}  id              The symbol id.\r\n * @param {Object}  props           The properties of the symbol.\r\n * @param {Boolean} selected=false  The selected status.\r\n * @param {Boolean} selectedProps   Properties will apply when symbol is selected.\r\n *\r\n */\r\nclass GisSymbol {\r\n    constructor(id, type, props, selected=false, selectedProps) {\r\n        this._id = id\r\n        this._type = type\r\n        this._props = props\r\n        this._selected = selected\r\n        this._selectedProps = selectedProps\r\n        this._layer = this.setLayer(props, selected, selectedProps)\r\n        this._layer.id = `${id}_layer`\r\n        this._layer._gis_id = id\r\n    }\r\n\r\n    /*\r\n     * Gets the symbol's id.\r\n     *\r\n     * @return {String}               The symbol's id.\r\n     */\r\n    get id() {\r\n        return this._id\r\n    }\r\n\r\n    /*\r\n     * Gets the symbol's type.\r\n     *\r\n     * @return {String}               The symbol's type.\r\n     */\r\n    get type() {\r\n        return this._type\r\n    }\r\n\r\n    /*\r\n     * Gets the symbol's props.\r\n     *\r\n     * @return {Object}               The symbol's props.\r\n     */\r\n    get props() {\r\n        return this._props\r\n    }\r\n\r\n    /*\r\n     * Gets the symbol's selected status.\r\n     *\r\n     * @return {Boolean}               The symbol's selected status.\r\n     */\r\n    get selected() {\r\n        return this._selected\r\n    }\r\n\r\n    /*\r\n     * Gets the symbol's selected props.\r\n     *\r\n     * @return {Object}               The symbol's selected props.\r\n     */\r\n    get selectedProps() {\r\n        return this._selectedProps\r\n    }\r\n\r\n    /*\r\n     * Gets the symbol's current props, which may be props merged with selectedProps when selected.\r\n     *\r\n     * @return {Object}               The symbol's current props.\r\n     */\r\n    get currentProps() {\r\n        const latlng = this._selectedProps\r\n                    ? (this._selectedProps.latlng || this._props.latlng)\r\n                    : this._props.latlng\r\n\r\n        return this._selected\r\n                ? _.chain({})\r\n                    .merge(this._props, this._selectedProps)\r\n                    .set('latlng', latlng)\r\n                    .value()\r\n                : this._props\r\n    }\r\n\r\n    /*\r\n     * Gets the symbol's leaflet layer instance.\r\n     *\r\n     * @return {Lefalet layer}               The symbol's Leaflet layer instance.\r\n     */\r\n    get layer() {\r\n        return this._layer\r\n    }\r\n\r\n    /*\r\n     * Gets the symbol's selected status.\r\n     *\r\n     * @return {Boolean}               The symbol's selected status.\r\n     */\r\n    isSelected() {\r\n        return this._selected\r\n    }\r\n\r\n    /*\r\n     * Sets symbol's selected status.\r\n     *\r\n     */\r\n    setSelected(selected=this._selected) {\r\n        (selected !== this._selected) && this.set(this._props, selected, this._selectedProps)\r\n    }\r\n\r\n    /*\r\n     * Sets symbol's props and selectedProps.\r\n     * Original ones will be merged into new ones.\r\n     * @see function set(props, selected, selectedProps)\r\n     *\r\n     * @param {Object}  props           The symbol's props.\r\n     * @param {Object}  selectedProps   The symbol's selectedProps.\r\n     *\r\n     */\r\n    setProps(props, selectedProps) {\r\n        this.set(props, this._selected, selectedProps)\r\n    }\r\n\r\n    /*\r\n     * Sets symbol's props, selected status and selectedProps.\r\n     * Original ones will be merged into new ones.\r\n     *\r\n     * @param {Object}  props           The symbol's props.\r\n     * @param {Boolean} selected        The selected status.\r\n     * @param {Object}  selectedProps   The symbol's selectedProps.\r\n     *\r\n     */\r\n    set(props, selected=this._selected, selectedProps) {\r\n        this.setLayer(props, selected, selectedProps)\r\n\r\n        this._props = _.merge({}, this._props, props)\r\n        this._selected = selected\r\n        this._selectedProps = _.merge({}, this._selectedProps, selectedProps)\r\n    }\r\n\r\n    /*\r\n     * Sets symbol's Leaflet layer instance according to props, selected and selectedProps.\r\n     *\r\n     * @param {Object}  props           The symbol's props.\r\n     * @param {Boolean} selected        The selected status.\r\n     * @param {Object}  selectedProps   The symbol's selectedProps.\r\n     *\r\n     * @return {Leaflet layer}          The symbol's Leaflet layer instance.\r\n     *\r\n     */\r\n    setLayer(props, selected=this._selected, selectedProps) {\r\n        // Polyline's fill prop is set false by default in leaflet\r\n        const defaultStyle = {\r\n            ...DEFAULT_SYMBOL_STYLE,\r\n            fill: this._type !== SYMBOL_TYPE.POLYLINE && this._type !== EXTRA_SYMBOL_TYPE.TRACK\r\n        }\r\n\r\n        const defaultSltStyle = {\r\n            ...DEFAULT_SYMBOL_SLT_STYLE,\r\n            fill: this._type !== SYMBOL_TYPE.POLYLINE && this._type !== EXTRA_SYMBOL_TYPE.TRACK\r\n        }\r\n\r\n        // Fix issue #21\r\n        const latlng = selectedProps\r\n                    ? selectedProps.latlng || this._selectedProps.latlng || props.latlng || this._props.latlng\r\n                    : props.latlng || this._props.latlng\r\n\r\n        const newProps = selected\r\n            ? _({})\r\n                .merge(defaultStyle, this._props, props, defaultSltStyle, this._selectedProps, selectedProps)\r\n                .set('latlng', latlng)\r\n                .omitBy(_.isNil)\r\n                .value()\r\n            : _.merge({}, defaultStyle, props)\r\n\r\n        /*\r\n            Normalize the className\r\n            Besides props.className, add default className `gis-${this._type}` to symbols\r\n        */\r\n        const className = _.chain(cx(\r\n            `gis-${this._type}`,\r\n                            {[`gis-${this._origType}`]:!!this._origType, selected},\r\n            props.className || '',\r\n            newProps.className || ''\r\n                        ))\r\n                        .split(' ')\r\n                        .uniq()\r\n                        .join(' ')\r\n                        .value()\r\n\r\n        newProps.className = className\r\n\r\n        if (!this._layer) {\r\n            this._layer = this._createLayer(newProps)\r\n        }\r\n        else if (this._layer && !_.isEqual(this.currentProps, newProps)) {\r\n            this._layer = this._updateLayer(this.currentProps, newProps)\r\n        }\r\n\r\n        // Bring selected symbols to top\r\n        if (selected) {\r\n            // this._layer._mapToAdd is for checking the layer is on the map\r\n            this._layer._mapToAdd && this._layer.bringToFront()\r\n        }\r\n\r\n        // Add class 'selected' to symbols when selected\r\n        if (this._layer._mapToAdd) {\r\n            const toggleClassFunc = selected ? L.DomUtil.addClass : L.DomUtil.removeClass\r\n            const isGeoJSON = (this._layer instanceof L.GeoJSON)\r\n            const isDirected = (this._type === SYMBOL_TYPE.POLYLINE || this._type === EXTRA_SYMBOL_TYPE.TRACK) &&\r\n                                this._props.directed\r\n\r\n            if (isGeoJSON) {\r\n                this._layer.eachLayer(lyr => {\r\n                    _.forEach(lyr._layers, l => {\r\n                        toggleClassFunc(l._path, 'selected')\r\n                    })\r\n                })\r\n            }\r\n            else if (isDirected) {\r\n                this._layer.eachLayer(lyr => {\r\n                    if (lyr instanceof L.Polyline) {\r\n                        toggleClassFunc(lyr._path, 'selected')\r\n                    }\r\n                    // Patterns are nested groups\r\n                    else {\r\n                        lyr.eachLayer(lg => {\r\n                            lg.eachLayer(l => {\r\n                                l.eachLayer(p => {\r\n                                    toggleClassFunc(p._path, 'selected')\r\n                                })\r\n                            })\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n            else {\r\n                toggleClassFunc(this._layer._path, 'selected')\r\n            }\r\n        }\r\n\r\n        return this._layer\r\n    }\r\n\r\n    /*\r\n     * Creates/updates tooltip/popup of symbol.\r\n     *\r\n     * @param {String}                       type           Info type, which is 'tooltip' or 'popup'.\r\n     * @param {String | Object | Function}   info           Info content.\r\n     *\r\n     */\r\n    setInfo(type, info) {\r\n        if (_.includes(INFO_TYPE, type)) {\r\n            const hasInfo = !_.isNil(this._layer[`get${_.upperFirst(type)}`]())\r\n\r\n            if (!hasInfo) {\r\n                this._createInfo(type, info)\r\n            }\r\n            else {\r\n                this._updateInfo(type, _.merge({}, this.currentProps[type], info))\r\n            }\r\n        }\r\n        else {\r\n            log.warn(\r\n                GIS_ERROR.INVALID_TYPE, type,\r\n                `The info type should be \"${SYMBOL_TYPE.TOOLTIP}\", or \"${SYMBOL_TYPE.POPUP}\"`\r\n            )\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Picks the valid style props.\r\n     *\r\n     * @param {Object}   initProps           The symbol's initial props.\r\n     *\r\n     */\r\n    _getInitialStyle(initProps) {\r\n        return _.pick(initProps, STYLE_DICT)\r\n    }\r\n\r\n    /*\r\n     * Creates the Leaflet layer instance.\r\n     *\r\n     * @param {Object}   newProps           The symbol's props.\r\n     *\r\n     */\r\n    _createLayer(newProps) {\r\n        let layer = null\r\n        return layer\r\n    }\r\n\r\n    /*\r\n     * Updates the Leaflet layer instance.\r\n     *\r\n     * @param {Object}   prevProps           The symbol's original props.\r\n     * @param {Object}   nextProps           The symbol's new props.\r\n     *\r\n     * @return {Leaflet layer}               Updated layer instance.\r\n     *\r\n     */\r\n    _updateLayer(prevProps, nextProps) {\r\n        // Props like tooltip, popup, can't be set by setStyle\r\n        const style = _.pick(nextProps, STYLE_DICT)\r\n\r\n        // Set the location\r\n        if (nextProps.latlng && !_.isEqual(prevProps.latlng, nextProps.latlng)) {\r\n            this._layer.setLatLngs(nextProps.latlng)\r\n        }\r\n\r\n        if (!_.isNil(style)) {\r\n            this._layer.setStyle(style)\r\n        }\r\n\r\n        if (!_.isNil(this._props.tooltip) && !_.isNil(nextProps.tooltip)) {\r\n            this._updateInfo(INFO_TYPE.TOOLTIP, _.merge({}, this._props.tooltip, nextProps.tooltip))\r\n        }\r\n\r\n        if (!_.isNil(this._props.popup) && !_.isNil(nextProps.popup)) {\r\n            this._updateInfo(INFO_TYPE.POPUP, _.merge({}, this._props.popup, nextProps.popup))\r\n        }\r\n\r\n        return this._layer\r\n    }\r\n\r\n    /*\r\n     * Binds tooltip or popup to symbol Leaflet layer instance.\r\n     *\r\n     * @param {String}   type           The info's type, which is tooltip or popup.\r\n     * @param {Object}   infoConfig     The info's config.\r\n     *\r\n     */\r\n    _createInfo(type, {content, ...options}) {\r\n        this._layer[`bind${_.upperFirst(type)}`](content, options)\r\n    }\r\n\r\n    /*\r\n     * Updates tooltip or popup of the symbol Leaflet layer instance.\r\n     *\r\n     * @param {String}   type           The info's type, which is tooltip or popup.\r\n     * @param {Object}   infoConfig     The info's new config.\r\n     *\r\n     */\r\n    _updateInfo(type, {content, ...options}) {\r\n        const info = L[type](options).setContent(content)\r\n\r\n        this._layer[`unbind${_.upperFirst(type)}`]()\r\n        this._layer[`bind${_.upperFirst(type)}`](info)\r\n    }\r\n}\r\n\r\n\r\nexport default GisSymbol"],"file":"symbol.js"}