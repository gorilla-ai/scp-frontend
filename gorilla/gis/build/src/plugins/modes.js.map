{"version":3,"sources":["../../../src/plugins/modes.js"],"names":["createCircleHandler","L","that","Draw","Circle","extend","options","shapeOptions","DEFAULT_REGION_STYLE","showRadius","metric","addHooks","Feature","prototype","call","_map","on","_onMouseDown","_onMouseMove","_onMouseUp","dragging","disable","rectangleSelector","measureMode","drawMode","_container","style","cursor","removeHooks","_shape","off","_dragMode","DRAG_MODE","PAN","enable","e","originalEvent","buttons","_isDrawing","_drawShape","latlng","shape","map","mapBounds","getBounds","prevMapSelected","_","cloneDeep","_selected","symbols","reduce","_symbols","_clusterSymbols","_flags","acc","el","key","isPoint","type","SYMBOL_TYPE","MARKER","SPOT","EXTRA_SYMBOL_TYPE","CLUSTER","clusterId","props","cluster","clusterLyr","_gCluster","layer","_clusters","hasLayer","isWithin","contains","getLatLng","isSelected","setSelected","eventObj","containerPoint","latLngToContainerPoint","_latlng","layerPoint","latLngToLayerPoint","radius","_mRadius","target","isMultiple","circleCenter","getRadius","circlePolygon","gh","convertCircleToPolygon","vertices","isChanged","forEach","id","elCenter","distance","crs","symbolGeo","CIRCLE","startFrom","startAngle","stopAt","stopAngle","toGeoJSON","drawnGeo","isIntersect","isOverlap","allChildren","getAllChildMarkers","children","isEqual","listens","fire","removeLayer","createRectangleHandler","Rectangle","circleSelector","northEast","_bounds","_northEast","southWest","_southWest","bounds","createMeasureHandler","measureOptions","HINT","showPointer","showPointerTooltip","pTooltip","pointerTooltip","showEnd","showEndTooltip","eTooltip","endTooltip","vIcon","vertexIcon","hint","defaultVertex","className","iconSize","Polyline","isEmpty","merge","DEFAULT_TRACK_STYLE","pick","STYLE_DICT","zIndexOffset","isNil","_allPaths","layerGroup","addTo","_allVertexGroups","doubleClickZoom","content","isBoolean","_hintWrapper","DomUtil","create","innerHTML","isString","getSymbol","_path","_clear","_pointer","remove","pid","values","length","polyline","_pathLatLngs","_pathIds","_onDrawStart","lastVetex","_vertexGroup","last","getLayers","distanceTo","_finishPath","_createMarker","_pointerLatLng","circleMarker","bindTooltip","permanent","direction","openTooltip","setLatLngs","setLatLng","_updateTooltip","_onDraw","DomEvent","preventDefault","_getEventArguments","layers","event","pathInfo","_measureDistance","latlngs","_getPathLatLngs","_onDrawEnd","rawLatlng","lat","lng","currentPath","allPath","path","pathLatLngs","getLatLngs","getPathDistance","icon","clone","isFunction","isPlainObject","indexOf","vertex","marker","divIcon","_vertexGroupId","addLayer","getLayerId","push","setTooltipContent","createDrawHandler","drawOptions","drawLocal","get","Handler","initialize","_overlayPane","_panes","overlayPane","_drawnGroup","FeatureGroup","stop","shouldTrigger","DRAW","_drawType","DRAW_TYPE","DELETE","Event","DELETED","EDIT","drawnId","_gis_id","symbol","CREATED","_handleCreate","_fireEvent","_lastCreated","DRAWSTOP","_activeHandler","EDITSTOP","_updateSymbols","drawnIds","drawControl","getControl","drawType","_addVirtualSymbols","addControl","setDrawType","getContainer","focus","classList","add","isStdOrTrack","_layout","LAYOUT","STANDARD","TRACK","defaultControl","removeControl","clearLayers","shouldAddBack","_visible","_virtual","enabled","_control","Control","edit","featureGroup","Marker","CircleMarker","POLYLINE","POLYGON","Polygon","RECTANGLE","EditToolbar","Edit","selectedPathOptions","dashArray","fill","fillColor","fillOpacity","maintainColor","poly","Delete","layerType","isPolyline","isPolygon","Math","random","toString","replace","substr","selected","setSymbol","_isDrawn","_editableIds","_convertToVirtual","eventName","validType","GEOJSON","isPoly","virtual","directed","polygon","rectangle","semiCircle","_gis_type","_virtual_id","v","set","selectedProps","_props"],"mappings":"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","sourcesContent":["/**\r\n * This file defines & implements region selection, measure, and draw modes.\r\n *\r\n * @file   Defines & implements rectangle/circle selection, measure mode, and draw mode.\r\n * @author Liszt\r\n */\r\n\r\nimport _ from 'lodash'\r\n\r\nimport {DEFAULT_REGION_STYLE, DEFAULT_TRACK_STYLE} from '../consts/style'\r\nimport {DRAG_MODE, SYMBOL_TYPE, DRAW_TYPE, EXTRA_SYMBOL_TYPE, STYLE_DICT, LAYOUT} from '../consts/dictionary'\r\nimport gh from '../utils/gis-helper'\r\n\r\n/**\r\n * Creates circle-region selection handler.\r\n * The handler is extend from L.Draw.Circle (see leaflet.draw plugin)\r\n * For futher study, see node-modules/leaflet.draw/dist/leaflet.draw-src.js or the link.\r\n *\r\n * @link    https://github.com/Leaflet/Leaflet.draw/blob/develop/src/draw/handler/Draw.Circle.js\r\n *\r\n * @param {Leaflet} L           Leaflet module\r\n *\r\n * @return {Leaflet handler}    The circle selection handler, which select a circle region on map.\r\n */\r\nexport function createCircleHandler(L) {\r\n    const that = this\r\n\r\n    // Extend L.Draw.Circle as circle selector\r\n    return L.Draw.Circle.extend({\r\n        options: {\r\n            shapeOptions: DEFAULT_REGION_STYLE,\r\n            showRadius: false,\r\n            metric: true   // Whether to use the metric measurement system or imperial\r\n        },\r\n\r\n        // Called when the handler is enabled\r\n        addHooks() {\r\n            L.Draw.Feature.prototype.addHooks.call(this)\r\n            if (this._map) {\r\n                this._map\r\n                    .on('mousedown', this._onMouseDown, this)\r\n                    .on('mousemove', this._onMouseMove, this)\r\n                    .on('mouseup', this._onMouseUp, this)\r\n                    .dragging.disable()\r\n\r\n                this._map.rectangleSelector.disable()\r\n                this._map.measureMode.disable()\r\n                this._map.drawMode.disable()\r\n\r\n                this._map._container.style.cursor = 'crosshair'\r\n            }\r\n        },\r\n\r\n        removeHooks() {\r\n            delete this._shape\r\n\r\n            this._map\r\n                .off('mousedown', this._onMouseDown, this)\r\n                .off('mousemove', this._onMouseMove, this)\r\n                .off('mouseup', this._onMouseUp, this)\r\n\r\n            if (that._dragMode === DRAG_MODE.PAN) {\r\n                this._map.dragging.enable()\r\n            }\r\n\r\n            this._map._container.style.cursor = '-webkit-grab'\r\n        },\r\n\r\n        _onMouseMove(e) {\r\n            // Fix issue #1 and #2\r\n            // e.originalEvent.buttons === 1 means Primary button\r\n            if (e.originalEvent.buttons === 1 && this._isDrawing) {\r\n                this._drawShape(e.latlng)\r\n            }\r\n        },\r\n\r\n        _onMouseUp() {\r\n            const shape = this._shape\r\n            if (shape) {\r\n                const map = this._map\r\n                const mapBounds = map.getBounds()\r\n                const prevMapSelected = _.cloneDeep(that._selected)\r\n\r\n                // For performance, filter the symbols within the current view\r\n                const symbols = _.reduce({...that._symbols, ...that._clusterSymbols, ...that._flags}, (acc, el, key) => {\r\n                    const isPoint = el.type === SYMBOL_TYPE.MARKER ||\r\n                                    el.type === SYMBOL_TYPE.SPOT ||\r\n                                    el.type === EXTRA_SYMBOL_TYPE.CLUSTER\r\n\r\n                    const clusterId = el.props.cluster\r\n                    const clusterLyr = clusterId ?\r\n                                        clusterId === true ? that._gCluster.layer : that._clusters[clusterId].layer :\r\n                                        null\r\n\r\n                    const hasLayer = map.hasLayer(el.layer) ||\r\n                                    (clusterLyr &&\r\n                                    map.hasLayer(clusterLyr) &&\r\n                                    clusterLyr.hasLayer(el.layer))\r\n\r\n                    if (isPoint) {\r\n                        const isWithin = mapBounds.contains(el.layer.getLatLng())\r\n                        if (isWithin && hasLayer) {\r\n                            acc[key] = el\r\n                        }\r\n                        else if (!isWithin && el.isSelected()) {\r\n                            el.setSelected(false)\r\n                        }\r\n                    }\r\n                    // TODO: how to filter other symbol types\r\n                    else if (hasLayer) {\r\n                        acc[key] = el\r\n                    }\r\n\r\n                    return acc\r\n                }, {})\r\n\r\n                const eventObj = {\r\n                    containerPoint: map.latLngToContainerPoint(shape._latlng),\r\n                    latlng: shape._latlng,\r\n                    layerPoint: map.latLngToLayerPoint(shape._latlng),\r\n                    radius: shape._mRadius,\r\n                    target: map,\r\n                    type: 'selectionChange',\r\n                    isMultiple: true\r\n                }\r\n\r\n                const circleCenter = shape.getLatLng()\r\n                const radius = shape.getRadius()  // in meters\r\n                // Convert circle to polygon to generate geojson\r\n                // const circlePolygon = gh.convertCircleToPolygon(circleCenter, radius, 128, 0, 360, map.options.crs)\r\n                const circlePolygon = gh.convertCircleToPolygon(shape, map, {vertices:180})\r\n                let isChanged = false\r\n\r\n                // Reset the selection\r\n                that._selected = {}\r\n\r\n                _.forEach(symbols, el => {\r\n                    if (that._selected[el.id]) {\r\n                        return\r\n                    }\r\n\r\n                    let isSelected = false\r\n\r\n                    const isPoint = el.type === SYMBOL_TYPE.MARKER ||\r\n                                    el.type === SYMBOL_TYPE.SPOT ||\r\n                                    el.type === EXTRA_SYMBOL_TYPE.CLUSTER\r\n\r\n                    if (isPoint) {\r\n                        const elCenter = el.layer.getLatLng()\r\n                        const distance = map.options.crs.distance(circleCenter, elCenter)\r\n\r\n                        // Check the marker is in the circle or not\r\n                        isSelected = distance <= radius\r\n                    }\r\n                    else {\r\n                        // Convert symbol & polygon to geojson, then check the line intersection\r\n                        const symbolGeo = el.type === SYMBOL_TYPE.CIRCLE\r\n                                        ? gh.convertCircleToPolygon(el.layer, map, {\r\n                                            vertices: 180,\r\n                                            startFrom: el.props.startAngle || 0,\r\n                                            stopAt: el.props.stopAngle || 360\r\n                                        }).toGeoJSON()\r\n                                        : el.layer.toGeoJSON()\r\n\r\n                        const drawnGeo = circlePolygon.toGeoJSON()\r\n\r\n                        const isIntersect = gh.isIntersect(symbolGeo, drawnGeo)\r\n                        const isOverlap = gh.isOverlap(symbolGeo, drawnGeo)\r\n\r\n                        if (isIntersect || isOverlap) {\r\n                            isSelected = true\r\n                        }\r\n                    }\r\n\r\n                    // Set symbol's 'selected' prop\r\n                    el.setSelected(isSelected)\r\n                    if (isSelected && el.type !== EXTRA_SYMBOL_TYPE.CLUSTER) {\r\n                        that._selected[el.id] = true\r\n                    }\r\n\r\n                    if (isSelected && el.type === EXTRA_SYMBOL_TYPE.CLUSTER) {\r\n                        const allChildren = _.map(el.layer.getAllChildMarkers(), '_gis_id')\r\n                        const children = _.reduce(allChildren, (acc, id) => {\r\n                            that._symbols[id].setSelected(true)\r\n                            acc[id] = true\r\n                            return acc\r\n                        }, {})\r\n\r\n                        that._selected = {...that._selected, ...children}\r\n                    }\r\n                })\r\n\r\n                // Trigger selectionChange event of map\r\n                isChanged = !_.isEqual(that._selected, prevMapSelected)\r\n                if (isChanged && map.listens('selectionChange')) {\r\n                    // Fire 'clusterselectionChange' is for re-render selected cluster\r\n                    map.fire('selectionChange', eventObj)\r\n                        .fire('clusterselectionChange', eventObj)\r\n                }\r\n\r\n                // Reset the drawn region\r\n                map.removeLayer(shape)\r\n                delete this._shape\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\n/**\r\n * Creates rectangle-region selection handler.\r\n * The handler is extend from L.Draw.Rectangle (see leaflet.draw plugin)\r\n * For futher study, see node-modules/leaflet.draw/dist/leaflet.draw-src.js or the link.\r\n *\r\n * @link    https://github.com/Leaflet/Leaflet.draw/blob/develop/src/draw/handler/Draw.Rectangle.js\r\n *\r\n * @param {Leaflet} L           Leaflet module\r\n *\r\n * @return {Leaflet handler}    The rectangle selection handler, which can select a rectangle region on map.\r\n */\r\nexport function createRectangleHandler(L) {\r\n    const that = this\r\n\r\n    // Extend L.Draw.Rectangle as box-selector\r\n    return L.Draw.Rectangle.extend({\r\n        options: {\r\n            shapeOptions: DEFAULT_REGION_STYLE,\r\n            metric: true // Whether to use the metric measurement system or imperial\r\n        },\r\n\r\n        // Called when the handler is enabled\r\n        addHooks() {\r\n            L.Draw.Feature.prototype.addHooks.call(this)\r\n            if (this._map) {\r\n                this._map\r\n                    .on('mousedown', this._onMouseDown, this)\r\n                    .on('mousemove', this._onMouseMove, this)\r\n                    .on('mouseup', this._onMouseUp, this)\r\n                    .dragging.disable()\r\n\r\n                this._map.circleSelector.disable()\r\n                this._map.measureMode.disable()\r\n                this._map.drawMode.disable()\r\n\r\n                this._map._container.style.cursor = 'crosshair'\r\n            }\r\n        },\r\n\r\n        removeHooks() {\r\n            delete this._shape\r\n\r\n            this._map\r\n                .off('mousedown', this._onMouseDown, this)\r\n                .off('mousemove', this._onMouseMove, this)\r\n                .off('mouseup', this._onMouseUp, this)\r\n\r\n            if (that._dragMode === DRAG_MODE.PAN) {\r\n                this._map.dragging.enable()\r\n            }\r\n\r\n            this._map._container.style.cursor = '-webkit-grab'\r\n        },\r\n\r\n        _onMouseMove(e) {\r\n            // Fix issue #1 and #2\r\n            // e.originalEvent.buttons === 1 means Primary button\r\n            if (e.originalEvent.buttons === 1 && this._isDrawing) {\r\n                this._drawShape(e.latlng)\r\n            }\r\n        },\r\n\r\n        _onMouseUp() {\r\n            const shape = this._shape\r\n            if (shape) {\r\n                const map = this._map\r\n                const mapBounds = map.getBounds()\r\n                const prevMapSelected = _.cloneDeep(that._selected)\r\n\r\n                // For performance, filter the symbols within the current view\r\n                const symbols = _.reduce({...that._symbols, ...that._clusterSymbols, ...that._flags}, (acc, el, key) => {\r\n                    const isPoint = el.type === SYMBOL_TYPE.MARKER ||\r\n                                    el.type === SYMBOL_TYPE.SPOT ||\r\n                                    el.type === EXTRA_SYMBOL_TYPE.CLUSTER\r\n\r\n                    const clusterId = el.props.cluster\r\n                    const clusterLyr = clusterId ?\r\n                                        clusterId === true ? that._gCluster.layer : that._clusters[clusterId].layer :\r\n                                        null\r\n\r\n                    const hasLayer = map.hasLayer(el.layer) ||\r\n                                    (clusterLyr &&\r\n                                    map.hasLayer(clusterLyr) &&\r\n                                    clusterLyr.hasLayer(el.layer))\r\n\r\n                    if (isPoint) {\r\n                        const isWithin = mapBounds.contains(el.layer.getLatLng())\r\n                        if (isWithin && hasLayer) {\r\n                            acc[key] = el\r\n                        }\r\n                        else if (!isWithin && el.isSelected()) {\r\n                            el.setSelected(false)\r\n                        }\r\n                    }\r\n                    // TODO: how to filter other symbol types\r\n                    else if (hasLayer) {\r\n                        acc[key] = el\r\n                    }\r\n\r\n                    return acc\r\n                }, {})\r\n\r\n                const containerPoint = {\r\n                    northEast: map.latLngToContainerPoint(shape._bounds._northEast),\r\n                    southWest: map.latLngToContainerPoint(shape._bounds._southWest)\r\n                }\r\n\r\n                const layerPoint = {\r\n                    northEast: map.latLngToLayerPoint(shape._bounds._northEast),\r\n                    southWest: map.latLngToLayerPoint(shape._bounds._southWest)\r\n                }\r\n\r\n                const eventObj = {\r\n                    containerPoint,\r\n                    bounds: shape._bounds,\r\n                    layerPoint,\r\n                    target: map,\r\n                    type: 'selectionChange',\r\n                    isMultiple: true\r\n                }\r\n\r\n                let isChanged = false\r\n\r\n                // Reset the selection\r\n                that._selected = {}\r\n\r\n                _.forEach(symbols, el => {\r\n                    if (that._selected[el.id]) {\r\n                        return\r\n                    }\r\n\r\n                    let isSelected = false\r\n\r\n                    const isPoint = el.type === SYMBOL_TYPE.MARKER ||\r\n                                    el.type === SYMBOL_TYPE.SPOT ||\r\n                                    el.type === EXTRA_SYMBOL_TYPE.CLUSTER\r\n\r\n                    if (isPoint) {\r\n                        // Get the bounds of the rectangle, then checking symbol is in bounds or not\r\n                        const elCenter = el.layer.getLatLng()\r\n                        isSelected = shape.getBounds().contains(elCenter)\r\n                    }\r\n                    else {\r\n                        // Convert symbol & rectangle to geojson, then check the line intersection\r\n                        const symbolGeo = el.type === SYMBOL_TYPE.CIRCLE\r\n                                        ? gh.convertCircleToPolygon(el.layer, map, {\r\n                                            vertices: 180,\r\n                                            startFrom: el.props.startAngle || 0,\r\n                                            stopAt: el.props.stopAngle || 360\r\n                                        }).toGeoJSON()\r\n                                        : el.layer.toGeoJSON()\r\n\r\n                        const drawnGeo = shape.toGeoJSON()\r\n\r\n                        const isIntersect = gh.isIntersect(symbolGeo, drawnGeo)\r\n                        const isOverlap = gh.isOverlap(symbolGeo, drawnGeo)\r\n\r\n                        if (isIntersect || isOverlap) {\r\n                            isSelected = true\r\n                        }\r\n                    }\r\n\r\n                    // Set symbol's 'selected' prop\r\n                    el.setSelected(isSelected)\r\n                    if (isSelected && el.type !== EXTRA_SYMBOL_TYPE.CLUSTER) {\r\n                        that._selected[el.id] = true\r\n                    }\r\n\r\n                    if (isSelected && el.type === EXTRA_SYMBOL_TYPE.CLUSTER) {\r\n                        const allChildren = _.map(el.layer.getAllChildMarkers(), '_gis_id')\r\n                        const children = _.reduce(allChildren, (acc, id) => {\r\n                            that._symbols[id].setSelected(true)\r\n                            acc[id] = true\r\n                            return acc\r\n                        }, {})\r\n\r\n                        that._selected = {...that._selected, ...children}\r\n                    }\r\n                })\r\n\r\n                // Trigger selectionChange event of map\r\n                isChanged = !_.isEqual(that._selected, prevMapSelected)\r\n                if (isChanged && map.listens('selectionChange')) {\r\n                    // Fire 'clusterselectionChange' is for re-render selected cluster\r\n                    map.fire('selectionChange', eventObj)\r\n                        .fire('clusterselectionChange', eventObj)\r\n                }\r\n\r\n                // Reset the drawn region\r\n                map.removeLayer(shape)\r\n                delete this._shape\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\n/**\r\n * Creates measure mode handler.\r\n * The handler is extend from L.Draw.Polyline (see leaflet.draw plugin)\r\n * For futher study, see node-modules/leaflet.draw/dist/leaflet.draw-src.js or the link.\r\n *\r\n * @link    https://github.com/Leaflet/Leaflet.draw/blob/develop/src/draw/handler/Draw.Polyline.js\r\n *\r\n * @param {Leaflet} L           Leaflet module.\r\n *\r\n * @return {Leaflet handler}    The measure handler, which can measure a path distance on the map.\r\n */\r\nexport function createMeasureHandler(L, measureOptions) {\r\n    const that = this\r\n    const HINT = 'Double-Click to stop drawing'\r\n\r\n    const {showPointerTooltip: showPointer, pointerTooltip: pTooltip,\r\n        showEndTooltip: showEnd, endTooltip: eTooltip, vertexIcon: vIcon, hint} = measureOptions\r\n\r\n    const defaultVertex = {\r\n        className: 'gis-vertex',\r\n        iconSize: [30, 30]\r\n    }\r\n\r\n    // Extend L.Draw.Polyline\r\n    return L.Draw.Polyline.extend({\r\n        options: {\r\n            shapeOptions: !_.isEmpty(measureOptions)\r\n                        ? _.merge({}, DEFAULT_TRACK_STYLE, _.pick(measureOptions, STYLE_DICT))\r\n                        : DEFAULT_TRACK_STYLE,\r\n            metric: true, // Whether to use the metric measurement system or imperial\r\n            zIndexOffset: 3000,\r\n            showPointerTooltip: !_.isNil(showPointer) ? showPointer : true,\r\n            pointerTooltip: pTooltip || null,\r\n            showEndTooltip: !_.isNil(showEnd) ? showEnd : true,\r\n            endTooltip: eTooltip || null,\r\n            vertexIcon: vIcon || defaultVertex,\r\n            hint: hint || false\r\n        },\r\n\r\n        // Called when the handler is enabled\r\n        addHooks() {\r\n            L.Draw.Feature.prototype.addHooks.call(this)\r\n            if (this._map) {\r\n                this._allPaths = L.layerGroup([]).addTo(this._map)\r\n                this._allVertexGroups = L.layerGroup([]).addTo(this._map)\r\n\r\n                this._map\r\n                    .on('mousedown', this._onMouseDown, this)\r\n                    .on('mousemove', this._onMouseMove, this)\r\n\r\n                this._map.dragging.disable()\r\n                this._map.doubleClickZoom.disable()\r\n                this._map.circleSelector.disable()\r\n                this._map.rectangleSelector.disable()\r\n                this._map.drawMode.disable()\r\n\r\n                if (hint) {\r\n                    const content = _.isBoolean(hint) ? HINT : hint\r\n                    this._hintWrapper = L.DomUtil.create('div', 'gis-measure-hint', this._map._container)\r\n                    this._hintWrapper.innerHTML = _.isString(content) ? content : content(that.getSymbol(), this._map)\r\n                }\r\n            }\r\n        },\r\n\r\n        removeHooks() {\r\n            if (this._path) {\r\n                this._clear()\r\n            }\r\n\r\n            if (this._pointer) {\r\n                this._map.removeLayer(this._pointer)\r\n            }\r\n\r\n            this._map.removeLayer(this._allPaths)\r\n            this._map.removeLayer(this._allVertexGroups)\r\n\r\n            delete this._pointer\r\n            delete this._allPaths\r\n            delete this._allVertexGroups\r\n\r\n            this._map\r\n                .off('mousedown', this._onMouseDown, this)\r\n                .off('mousemove', this._onMouseMove, this)\r\n                .off('mouseup', this._onMouseUp, this)\r\n\r\n            if (that._dragMode === DRAG_MODE.PAN) {\r\n                this._map.dragging.enable()\r\n            }\r\n\r\n            if (this._hintWrapper) {\r\n                L.DomUtil.remove(this._hintWrapper)\r\n                delete this._hintWrapper\r\n            }\r\n\r\n            this._map.doubleClickZoom.enable()\r\n        },\r\n\r\n        _onMouseDown(e) {\r\n            if (!this._path) {\r\n                const pid = _.values(this._allVertexGroups).length\r\n\r\n                this._path = L.polyline([e.latlng], this.options.shapeOptions).addTo(this._map)\r\n                this._pathLatLngs = []\r\n                this._pathIds = `gis-path-${pid}`\r\n\r\n                if (this._map.listens('measurestart')) {\r\n                    this._onDrawStart(e)\r\n                }\r\n            }\r\n\r\n            const lastVetex = this._vertexGroup ? _.last(this._vertexGroup.getLayers()) : null\r\n            if (lastVetex && e.latlng.distanceTo(lastVetex.getLatLng()) === 0) {\r\n                this._finishPath(e)\r\n            }\r\n            else {\r\n                this._createMarker(e.latlng)\r\n            }\r\n        },\r\n\r\n        _onMouseMove(e) {\r\n            this._pointerLatLng = e.latlng\r\n\r\n            // The marker sitcks on mouse with the tooltip shows the path's distance\r\n            if (!this._pointer) {\r\n                this._pointer = L.circleMarker(this._pointerLatLng)\r\n                                .addTo(this._map)\r\n\r\n                if (this.options.showPointerTooltip) {\r\n                    this._pointer.bindTooltip('', {permanent:true, direction:'top'}).openTooltip()\r\n                }\r\n            }\r\n\r\n            if (this._path) {\r\n                this._path.setLatLngs([...this._pathLatLngs, this._pointerLatLng])\r\n            }\r\n\r\n            this._pointer.setLatLng(this._pointerLatLng)\r\n\r\n            if (this.options.showPointerTooltip) {\r\n                this._updateTooltip(e)\r\n            }\r\n\r\n            if (this._map.listens('measure')) {\r\n                this._onDraw(e)\r\n            }\r\n\r\n            L.DomEvent.preventDefault(e.originalEvent)\r\n        },\r\n\r\n        _onDrawStart(e) {\r\n            const {latlng, layers} = this._getEventArguments(e)\r\n            this._map.fire('measurestart', {event:e, pathInfo:latlng, layers})\r\n        },\r\n\r\n        _onDraw(e) {\r\n            const {latlng, layers} = this._getEventArguments(e)\r\n            const pathInfo = {\r\n                distance: this._measureDistance(this._path),\r\n                latlngs: this._getPathLatLngs(this._path),\r\n                latlng\r\n            }\r\n\r\n            this._map.fire('measure', {event:e, pathInfo, layers})\r\n        },\r\n\r\n        _onDrawEnd(e) {\r\n            const {latlng, layers} = this._getEventArguments(e)\r\n            const pathInfo = {\r\n                distance: this._measureDistance(this._path),\r\n                latlngs: this._getPathLatLngs(this._path),\r\n                latlng\r\n            }\r\n\r\n            this._map.fire('measureend', {event:e, pathInfo, layers})\r\n        },\r\n\r\n        _getEventArguments(e) {\r\n            const {latlng:rawLatlng} = e\r\n            const latlng = [rawLatlng.lat, rawLatlng.lng]\r\n            const layers = {\r\n                currentPath: this._path,\r\n                allPath: this._allPaths\r\n            }\r\n\r\n            return {latlng, layers}\r\n        },\r\n\r\n        _getPathLatLngs(path=[]) {\r\n            const pathLatLngs = (path instanceof L.Polyline) ? path.getLatLngs() : []\r\n            return _.map(pathLatLngs, ({lat, lng}) => {\r\n                return [lat, lng]\r\n            })\r\n        },\r\n\r\n        _measureDistance(path=[]) {\r\n            const latlngs = this._getPathLatLngs(path)\r\n            return gh.getPathDistance(latlngs, this._map.options.crs)\r\n        },\r\n\r\n        _createMarker(latlng) {\r\n            const {vertexIcon} = this.options\r\n            const latlngs = this._getPathLatLngs(this._path)\r\n\r\n            let icon = _.clone(defaultVertex)\r\n            if (_.isFunction(vertexIcon)) {\r\n                icon = _.merge({}, defaultVertex, vertexIcon(latlng, latlngs))\r\n            }\r\n            else if (_.isPlainObject(vertexIcon)) {\r\n                icon = _.merge({}, defaultVertex, vertexIcon)\r\n            }\r\n\r\n            if (icon.className.indexOf('gis-vertex') < 0) {\r\n                icon.className = `gis-vertex ${icon.className || ''}`\r\n            }\r\n\r\n            const vertex = L.marker(latlng, {\r\n                icon: L.divIcon(icon)\r\n            })\r\n\r\n            if (!this._vertexGroupId) {\r\n                this._vertexGroup = L.layerGroup([]).addTo(this._map)\r\n                this._allVertexGroups.addLayer(this._vertexGroup)\r\n\r\n                this._vertexGroupId = this._allVertexGroups.getLayerId(this._vertexGroup)\r\n            }\r\n\r\n            this._vertexGroup.addLayer(vertex)\r\n            this._pathLatLngs.push(latlng)\r\n        },\r\n\r\n        _updateTooltip(e) {\r\n            const latlngs = this._getPathLatLngs(this._path)\r\n            const distance = this._measureDistance(this._path)\r\n            const {pointerTooltip} = this.options\r\n            const {latlng} = this._getEventArguments(e)\r\n\r\n            // content should be a String / HtmlElement / L.Tooltip\r\n            const content = pointerTooltip\r\n                            ? _.isFunction(pointerTooltip) ? pointerTooltip(distance, latlng, latlngs, this._path) : pointerTooltip\r\n                            : `${distance} meters`\r\n\r\n            this._pointer.setTooltipContent(content)\r\n        },\r\n\r\n        _finishPath(e) {\r\n            if (this._pathLatLngs.length > 1) {\r\n                const path = L.polyline(this._pathLatLngs, this.options.shapeOptions).addTo(this._map)\r\n                const lastVetex = _.last(this._vertexGroup.getLayers())\r\n                const {showEndTooltip, endTooltip} = this.options\r\n                const {latlng} = this._getEventArguments(e)\r\n\r\n                this._allPaths.addLayer(path)\r\n                if (showEndTooltip) {\r\n                    const distance = this._measureDistance(path)\r\n                    const latlngs = this._getPathLatLngs(path)\r\n                    const content = endTooltip\r\n                                    ? _.isFunction(endTooltip) ? endTooltip(distance, latlng, latlngs, path) : endTooltip\r\n                                    : `${distance} meters`\r\n\r\n                    lastVetex.bindTooltip(content, {permanent:true, direction:'top'}).openTooltip()\r\n                }\r\n            }\r\n            else {\r\n                this._allVertexGroups.removeLayer(this._vertexGroup)\r\n                delete this._vertexGroup\r\n            }\r\n\r\n            if (this._map.listens('measureend')) {\r\n                this._onDrawEnd(e)\r\n            }\r\n\r\n            this._clear()\r\n        },\r\n\r\n        _clear() {\r\n            this._pathLatLngs = []\r\n            this._map.removeLayer(this._path)\r\n\r\n            delete this._path\r\n            delete this._vertexGroup\r\n            delete this._vertexGroupId\r\n        }\r\n    })\r\n}\r\n\r\n/**\r\n * Creates draw mode handler.\r\n * The handler is implemented based on leaflet.draw, see the link for more detail.\r\n * Map handlers are a new concept from Leaflet 1.0. They process DOM events from the browser and change the state on the map.\r\n *\r\n * @link    https://github.com/Leaflet/Leaflet.draw/tree/develop/src\r\n * @link    http://leaflet.github.io/Leaflet.draw/docs/leaflet-draw-latest.html\r\n * @link    https://leafletjs.com/examples/extending/extending-3-controls.html\r\n *\r\n * @param {Leaflet} L           Leaflet module\r\n *\r\n * @return {Leaflet handler}    The draw handler, which can draw/edit/delete features on the map.\r\n */\r\nexport function createDrawHandler(L, drawOptions=null) {\r\n    const that = this\r\n\r\n    // Set the text on control buttons and handlers\r\n    L.drawLocal = _.merge(L.drawLocal, _.get(drawOptions, 'locale', {}))\r\n\r\n    return L.Handler.extend({\r\n        initialize(map) {\r\n            this._map = map\r\n            this._container = map._container\r\n            this._overlayPane = map._panes.overlayPane\r\n\r\n            // For placing symbols drawn symbols\r\n            if (!this._drawnGroup) {\r\n                this._drawnGroup = new L.FeatureGroup()\r\n                this._map.addLayer(this._drawnGroup)\r\n            }\r\n\r\n            this._drawnGroup\r\n                .on('layerremove', event => {\r\n                    L.DomEvent.stop(event)\r\n                    const shouldTrigger = that._dragMode === DRAG_MODE.DRAW &&\r\n                                        that._drawType === DRAW_TYPE.DELETE &&\r\n                                        this._map.listens('delete')\r\n\r\n                    if (shouldTrigger) {\r\n                        this._map.fire(L.Draw.Event.DELETED, event)\r\n                    }\r\n                })\r\n                .on('dblclick', event => {\r\n                    L.DomEvent.stop(event)\r\n\r\n                    const shouldTrigger = that._drawType === DRAW_TYPE.EDIT &&\r\n                                        this._map.listens('editcontent')\r\n\r\n                    if (!shouldTrigger) {\r\n                        return\r\n                    }\r\n\r\n                    const layer = event.layer\r\n                    const drawnId = layer._gis_id\r\n                    const eventObj = {\r\n                        event,\r\n                        symbol: that.getSymbol(drawnId)\r\n                    }\r\n\r\n                    this._map.fire('editcontent', eventObj)\r\n                })\r\n\r\n            this._map\r\n                // Draw create event\r\n                .on(L.Draw.Event.CREATED, event => {\r\n                    L.DomEvent.stop(event)\r\n                    this._handleCreate(event)\r\n                    this._fireEvent('create', {\r\n                        event,\r\n                        layer: this._lastCreated.layer\r\n                    })\r\n                })\r\n                // Prevent the function from closing after drawing\r\n                .on(L.Draw.Event.DRAWSTOP, event => {\r\n                    // This condition judgement is for avoiding trigger in region selection\r\n                    if (that._dragMode === DRAG_MODE.DRAW) {\r\n                        L.DomEvent.stop(event)\r\n                        // Prevent to trigger by other modes which extended from leaflet.draw\r\n                        this._activeHandler && this._activeHandler.enable()\r\n                    }\r\n                })\r\n                // Trigger edit event when finishing editing\r\n                .on(L.Draw.Event.EDITSTOP, event => {\r\n                    L.DomEvent.stop(event)\r\n\r\n                    this._updateSymbols()\r\n\r\n                    if (this._map.listens('edit')) {\r\n                        this._map.fire('edit', {event, symbol:that.getSymbol()})\r\n                    }\r\n                })\r\n                .on(L.Draw.Event.DELETED, event => {\r\n                    L.DomEvent.stop(event)\r\n\r\n                    // triggered by clicking 'Clear All'\r\n                    if (event.layers) {\r\n                        const drawnIds = _.map(event.layers.getLayers(), '_gis_id')\r\n\r\n                        // Fire the customed events\r\n                        if (this._map.listens('delete')) {\r\n                            const eventObj = {\r\n                                event,\r\n                                symbol: that.getSymbol(drawnIds)\r\n                            }\r\n\r\n                            this._map.fire('delete', eventObj)\r\n                        }\r\n\r\n                        _.forEach(drawnIds, el => delete that._symbols[el])\r\n                    }\r\n                    else {\r\n                        this._fireEvent('delete', {\r\n                            event,\r\n                            layer: event.layer\r\n                        })\r\n                        delete that._symbols[event.layer._gis_id]\r\n                    }\r\n                })\r\n        },\r\n        addHooks() {\r\n            const drawControl = this.getControl()\r\n            const drawType = that._drawType\r\n\r\n            if (this._map) {\r\n                this._map.dragging.disable()\r\n                this._map.doubleClickZoom.disable()\r\n                this._map.circleSelector.disable()\r\n                this._map.rectangleSelector.disable()\r\n                this._map.measureMode.disable()\r\n\r\n                if (!this._map.hasLayer(this._drawnGroup)) {\r\n                    this._map.addLayer(this._drawnGroup)\r\n                }\r\n\r\n                this._addVirtualSymbols()\r\n                // If defaultControl is true, use the leaflet.draw control\r\n                if (_.get(drawOptions, 'defaultControl', false)) {\r\n                    this._map.addControl(drawControl)\r\n                }\r\n                else {\r\n                    this.setDrawType(drawType)\r\n                }\r\n\r\n                this._map.getContainer().focus()\r\n                this._map.getContainer().classList.add('gis-draw')\r\n                this.enable()\r\n            }\r\n        },\r\n        removeHooks() {\r\n            const isStdOrTrack = that._layout === LAYOUT.STANDARD ||\r\n                                that._layout === LAYOUT.TRACK\r\n\r\n            // Disable the handler first to prevent erro in leaflet\r\n            if (this._activeHandler) {\r\n                this._activeHandler.disable()\r\n                L.Handler.prototype.disable.call(this._activeHandler)\r\n                delete this._activeHandler\r\n            }\r\n\r\n            // Remove the default draw control\r\n            if (drawOptions.defaultControl) {\r\n                const drawControl = this.getControl()\r\n                this._map.removeControl(drawControl)\r\n            }\r\n\r\n            if (that._dragMode === DRAG_MODE.PAN) {\r\n                this._map.dragging.enable()\r\n            }\r\n\r\n            // All maps may need to redraw\r\n            this._updateSymbols()\r\n            this._drawnGroup.clearLayers()\r\n\r\n            // Add the original symbol back\r\n            _.forEach(that._symbols, el => {\r\n                const shouldAddBack = that._visible[el.id] &&\r\n                                    !this._map.hasLayer(el.layer)\r\n\r\n                if (isStdOrTrack && shouldAddBack) {\r\n                    this._map.addLayer(el.layer)\r\n                }\r\n            })\r\n\r\n            delete this._virtual\r\n\r\n            this._map.doubleClickZoom.enable()\r\n            this._map.getContainer().classList.remove('gis-draw')\r\n        },\r\n        disable() {\r\n            if (!this.enabled()) {\r\n                return\r\n            }\r\n\r\n            L.Handler.prototype.disable.call(this)\r\n        },\r\n        getControl() {\r\n            if (!this._control) {\r\n                this._control = new L.Control.Draw({\r\n                    ..._.pick(drawOptions, ['draw', 'position']),\r\n                    edit: {\r\n                        featureGroup: this._drawnGroup\r\n                    }\r\n                })\r\n            }\r\n\r\n            return this._control\r\n        },\r\n        setDrawType(drawType) {\r\n            if (this._activeHandler) {\r\n                this._activeHandler.disable()\r\n                L.Handler.prototype.disable.call(this._activeHandler)\r\n            }\r\n\r\n            switch (drawType) {\r\n                case DRAW_TYPE.MARKER:\r\n                    this._activeHandler = new L.Draw.Marker(this._map, {})\r\n                    break\r\n                case DRAW_TYPE.SPOT:\r\n                    this._activeHandler = new L.Draw.CircleMarker(this._map, {})\r\n                    break\r\n                case DRAW_TYPE.CIRCLE:\r\n                    this._activeHandler = new L.Draw.Circle(this._map, {})\r\n                    break\r\n                case DRAW_TYPE.POLYLINE:\r\n                    this._activeHandler = new L.Draw.Polyline(this._map, {})\r\n                    break\r\n                case DRAW_TYPE.POLYGON:\r\n                    this._activeHandler = new L.Draw.Polygon(this._map, {})\r\n                    break\r\n                case DRAW_TYPE.RECTANGLE:\r\n                    this._activeHandler = new L.Draw.Rectangle(this._map, {})\r\n                    break\r\n                case DRAW_TYPE.EDIT:\r\n                    this._activeHandler = new L.EditToolbar.Edit(this._map, {\r\n                        featureGroup: this._drawnGroup,\r\n                        selectedPathOptions: {\r\n                            dashArray: '10, 10',\r\n                            fill: true,\r\n                            fillColor: '#fe57a1',\r\n                            fillOpacity: 0.1,\r\n                            // Whether to user the existing layers color\r\n                            maintainColor: false\r\n                        },\r\n                        poly: null\r\n                    })\r\n                    // this._addVirtualSymbols()\r\n                    break\r\n                case DRAW_TYPE.DELETE:\r\n                    this._activeHandler = new L.EditToolbar.Delete(this._map, {\r\n                        featureGroup: this._drawnGroup\r\n                    })\r\n                    break\r\n                default:\r\n                    break\r\n            }\r\n\r\n            if (this.enabled() && this._activeHandler) {\r\n                this._activeHandler.enable()\r\n            }\r\n        },\r\n        _handleCreate(event) {\r\n            const layer = event.layer\r\n            const type = event.layerType === 'circlemarker' ? 'spot' : event.layerType\r\n            const radius = type === SYMBOL_TYPE.CIRCLE &&\r\n                            layer.getRadius()\r\n\r\n            const isPolyline = type === SYMBOL_TYPE.POLYLINE\r\n            const isPolygon = type === SYMBOL_TYPE.POLYGON ||\r\n                            type === SYMBOL_TYPE.RECTANGLE\r\n\r\n            let latlng = []\r\n            if (isPolygon || isPolyline) {\r\n                // Polygon, polyline, and rectangle are formed by vertices\r\n                latlng = isPolygon ?\r\n                        _.map(layer.getLatLngs()[0], el => [el.lat, el.lng]) :\r\n                        _.map(layer.getLatLngs(), ({lat, lng}) => [lat, lng])\r\n            }\r\n            else {\r\n                const {lat, lng} = layer.getLatLng()\r\n                latlng = [lat, lng]\r\n            }\r\n\r\n            const id = Math.random().toString(36).replace(/[^a-z]+/g, '').substr(1, 6)\r\n            const symbol = {\r\n                id,\r\n                type,\r\n                latlng,\r\n                radius,\r\n                selected: false\r\n            }\r\n\r\n            that.setSymbol(symbol)\r\n            that._symbols[id]._isDrawn = true\r\n            that._editableIds[id] = true\r\n            this._convertToVirtual(that._symbols[id])\r\n\r\n            this._lastCreated = that._symbols[id]\r\n        },\r\n        _fireEvent(eventName, event) {\r\n            const drawnId = _.get(event, 'layer._gis_id')\r\n            const eventObj = {\r\n                event: event.event,\r\n                symbol: that.getSymbol(drawnId)\r\n            }\r\n\r\n            // Fire the customed events\r\n            if (this._map.listens(eventName)) {\r\n                this._map.fire(eventName, eventObj)\r\n            }\r\n        },\r\n        _convertToVirtual(symbol) {\r\n            const layer = symbol.layer\r\n            const validType = symbol.type !== EXTRA_SYMBOL_TYPE.TRACK &&\r\n                            symbol.type !== EXTRA_SYMBOL_TYPE.CLUSTER &&\r\n                            symbol.type !== SYMBOL_TYPE.GEOJSON\r\n\r\n            const isPoly = symbol.type === SYMBOL_TYPE.POLYLINE ||\r\n                        symbol.type === SYMBOL_TYPE.POLYGON ||\r\n                        symbol.type === SYMBOL_TYPE.RECTANGLE\r\n\r\n            let virtual = null\r\n\r\n            if (!that._editableIds[symbol.id] || !validType) {\r\n                that._visible[symbol.id] && !this._map.hasLayer(layer) && this._map.addLayer(layer)\r\n                return\r\n            }\r\n\r\n            this._map.hasLayer(layer) && this._map.removeLayer(layer)\r\n            if (isPoly && symbol.props.directed) {\r\n                const latlng = symbol.props.latlng\r\n                virtual = L.polyline(latlng, _.pick(symbol.props, STYLE_DICT))\r\n            }\r\n            else if (isPoly) {\r\n                const latlng = layer.getLatLngs()\r\n\r\n                switch (symbol.type) {\r\n                    case SYMBOL_TYPE.POLYLINE:\r\n                        virtual = L.polyline(latlng, _.pick(symbol.props, STYLE_DICT))\r\n                        break\r\n                    case SYMBOL_TYPE.POLYGON:\r\n                        virtual = L.polygon(latlng, layer.options)\r\n                        break\r\n                    case SYMBOL_TYPE.RECTANGLE:\r\n                        virtual = L.rectangle(latlng, layer.options)\r\n                        break\r\n                    default:\r\n                        break\r\n                }\r\n            }\r\n            else {\r\n                const latlng = layer.getLatLng()\r\n\r\n                switch (symbol.type) {\r\n                    case SYMBOL_TYPE.MARKER:\r\n                    case SYMBOL_TYPE.SPOT:\r\n                        virtual = L.marker(latlng, layer.options)\r\n                        break\r\n                    case SYMBOL_TYPE.CIRCLE:\r\n                        virtual = L.semiCircle(latlng, layer.options)\r\n                        break\r\n                    default:\r\n                        break\r\n                }\r\n            }\r\n\r\n            if (virtual) {\r\n                this._drawnGroup.addLayer(virtual)\r\n\r\n                virtual._gis_id = symbol.id\r\n                virtual._gis_type = symbol.type\r\n\r\n                layer._virtual_id = this._drawnGroup.getLayerId(virtual)\r\n                this._virtual[symbol.id] = virtual\r\n            }\r\n        },\r\n        // Dynamically add editable symbols to draw group\r\n        _addVirtualSymbols() {\r\n            const symbols = that._symbols\r\n\r\n            this._drawnGroup.clearLayers()\r\n            this._virtual = {}\r\n\r\n            _.forEach(symbols, el => this._convertToVirtual(el))\r\n        },\r\n        _updateSymbols() {\r\n            // Update each symbol's location, radius, or any editable props\r\n            _.forEach(this._virtual, el => {\r\n                // These types can't be edited\r\n                const {_gis_type:type} = el\r\n                const symbol = that._symbols[el._gis_id]\r\n\r\n                if (!symbol) {\r\n                    return\r\n                }\r\n\r\n                const isPolyline = type === SYMBOL_TYPE.POLYLINE\r\n                const isPolygon = type === SYMBOL_TYPE.POLYGON ||\r\n                                type === SYMBOL_TYPE.RECTANGLE\r\n\r\n                if (isPolyline || isPolygon) {\r\n                    const latlng = isPolygon ?\r\n                                _.map(el.getLatLngs()[0], v => [v.lat, v.lng]) :\r\n                                _.map(el.getLatLngs(), ({lat, lng}) => [lat, lng])\r\n\r\n                    symbol.set({...symbol.props, latlng}, symbol.selected, symbol.selectedProps)\r\n                }\r\n                else {\r\n                    const {lat, lng} = el.getLatLng()\r\n                    const latlng = [lat, lng]\r\n\r\n                    // Update circle's radius\r\n                    if (type === SYMBOL_TYPE.CIRCLE) {\r\n                        symbol._props.radius = el.getRadius()\r\n                    }\r\n\r\n                    symbol.set({...symbol.props, latlng}, symbol.selected, symbol.selectedProps)\r\n                }\r\n            })\r\n        }\r\n    })\r\n}\r\n\r\nexport default {\r\n    createCircleHandler,\r\n    createRectangleHandler,\r\n    createMeasureHandler,\r\n    createDrawHandler\r\n}\r\n\r\n/* Default L.drawLocal, from leaflet.draw\r\n\r\nL.drawLocal = {\r\n    // format: {\r\n    //  numeric: {\r\n    //      delimiters: {\r\n    //          thousands: ',',\r\n    //          decimal: '.'\r\n    //      }\r\n    //  }\r\n    // },\r\n    draw: {\r\n        toolbar: {\r\n            // #TODO: this should be reorganized where actions are nested in actions\r\n            // ex: actions.undo  or actions.cancel\r\n            actions: {\r\n                title: 'Cancel drawing',\r\n                text: 'Cancel'\r\n            },\r\n            finish: {\r\n                title: 'Finish drawing',\r\n                text: 'Finish'\r\n            },\r\n            undo: {\r\n                title: 'Delete last point drawn',\r\n                text: 'Delete last point'\r\n            },\r\n            buttons: {\r\n                polyline: 'Draw a polyline',\r\n                polygon: 'Draw a polygon',\r\n                rectangle: 'Draw a rectangle',\r\n                circle: 'Draw a circle',\r\n                marker: 'Draw a marker',\r\n                circlemarker: 'Draw a circlemarker'\r\n            }\r\n        },\r\n        handlers: {\r\n            circle: {\r\n                tooltip: {\r\n                    start: 'Click and drag to draw circle.'\r\n                },\r\n                radius: 'Radius'\r\n            },\r\n            circlemarker: {\r\n                tooltip: {\r\n                    start: 'Click map to place circle marker.'\r\n                }\r\n            },\r\n            marker: {\r\n                tooltip: {\r\n                    start: 'Click map to place marker.'\r\n                }\r\n            },\r\n            polygon: {\r\n                tooltip: {\r\n                    start: 'Click to start drawing shape.',\r\n                    cont: 'Click to continue drawing shape.',\r\n                    end: 'Click first point to close this shape.'\r\n                }\r\n            },\r\n            polyline: {\r\n                error: '<strong>Error:</strong> shape edges cannot cross!',\r\n                tooltip: {\r\n                    start: 'Click to start drawing line.',\r\n                    cont: 'Click to continue drawing line.',\r\n                    end: 'Click last point to finish line.'\r\n                }\r\n            },\r\n            rectangle: {\r\n                tooltip: {\r\n                    start: 'Click and drag to draw rectangle.'\r\n                }\r\n            },\r\n            simpleshape: {\r\n                tooltip: {\r\n                    end: 'Release mouse to finish drawing.'\r\n                }\r\n            }\r\n        }\r\n    },\r\n    edit: {\r\n        toolbar: {\r\n            actions: {\r\n                save: {\r\n                    title: 'Save changes',\r\n                    text: 'Save'\r\n                },\r\n                cancel: {\r\n                    title: 'Cancel editing, discards all changes',\r\n                    text: 'Cancel'\r\n                },\r\n                clearAll: {\r\n                    title: 'Clear all layers',\r\n                    text: 'Clear All'\r\n                }\r\n            },\r\n            buttons: {\r\n                edit: 'Edit layers',\r\n                editDisabled: 'No layers to edit',\r\n                remove: 'Delete layers',\r\n                removeDisabled: 'No layers to delete'\r\n            }\r\n        },\r\n        handlers: {\r\n            edit: {\r\n                tooltip: {\r\n                    text: 'Drag handles or markers to edit features.',\r\n                    subtext: 'Click cancel to undo changes.'\r\n                }\r\n            },\r\n            remove: {\r\n                tooltip: {\r\n                    text: 'Click on a feature to remove.'\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n*/"],"file":"modes.js"}