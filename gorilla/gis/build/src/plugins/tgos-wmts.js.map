{"version":3,"sources":["../../../src/plugins/tgos-wmts.js"],"names":["L","TileLayer","WMTS","extend","defaultWmtsParams","SERVICE","REQUEST","VERSION","LAYER","STYLE","TILEMATRIXSET","FORMAT","initialize","url","options","wmtsParams","tileSize","height","detectRetina","Browser","retina","width","_","forEach","el","key","has","matrixIds","getDefaultMatrix","bounds","setOptions","onAdd","map","prototype","call","getTileUrl","tilePoint","zoom","_map","crs","CRS","EPSG3857","layer","nwPoint","multiplyBy","x","y","z","sePoint","add","Point","nw","project","unproject","se","tileWidth","ident","identifier","X0","topLeftCorner","lng","Y0","lat","tileCol","Math","floor","tileRow","setParams","params","noRedraw","redraw","matrixIds3857","Array","i","LatLng","tileLayer","wmts"],"mappings":"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","sourcesContent":["import L from 'leaflet'\r\nimport _ from 'lodash'\r\n\r\nL.TileLayer.WMTS = L.TileLayer.extend({\r\n    defaultWmtsParams: {\r\n        SERVICE: 'WMTS',\r\n        REQUEST: 'GetTile',\r\n        VERSION: '1.0.0',\r\n        LAYER: 'TGOSMAP_W',\r\n        STYLE: '_null',\r\n        TILEMATRIXSET: 'GoogleMapsCompatible',\r\n        FORMAT: 'image/png'\r\n    },\r\n\r\n    initialize(url, options) { // (String, Object)\r\n        let wmtsParams = L.extend({}, this.defaultWmtsParams),\r\n            tileSize = options.tileSize || this.options.tileSize\r\n\r\n        wmtsParams.height = (options.detectRetina && L.Browser.retina) ? tileSize * 2 : tileSize\r\n        wmtsParams.width = wmtsParams.height\r\n\r\n        _.forEach(options, (el, key) => {\r\n            if (!_.has(this.options, key) && key !== 'matrixIds') {\r\n                wmtsParams[key] = options[key]\r\n            }\r\n        })\r\n\r\n        this.wmtsParams = wmtsParams\r\n        this.matrixIds = options.matrixIds || this.getDefaultMatrix()\r\n        options.bounds = [[21.65607265, 117.84953432], [25.64233621, 123.85924109]]\r\n\r\n        L.setOptions(this, options)\r\n    },\r\n\r\n    onAdd(map) {\r\n        L.TileLayer.prototype.onAdd.call(this, map)\r\n    },\r\n\r\n    getTileUrl(tilePoint, zoom) { // (Point, Number) -> String\r\n        let map = this._map,\r\n            crs = map.options.crs || L.CRS.EPSG3857,\r\n            tileSize = this.options.tileSize,\r\n            layer = this.wmtsParams.LAYER,\r\n            nwPoint = tilePoint.multiplyBy(tileSize)\r\n\r\n        // +/-1 in order to be on the tile\r\n        nwPoint.x += 1\r\n        nwPoint.y -= 1\r\n        zoom = zoom || tilePoint.z\r\n\r\n        let sePoint = nwPoint.add(new L.Point(tileSize, tileSize)),\r\n            nw = crs.project(map.unproject(nwPoint, zoom)),\r\n            se = crs.project(map.unproject(sePoint, zoom)),\r\n            tileWidth = se.x - nw.x\r\n\r\n        let ident = this.matrixIds[zoom].identifier,\r\n            X0 = this.matrixIds[zoom].topLeftCorner.lng,\r\n            Y0 = this.matrixIds[zoom].topLeftCorner.lat\r\n\r\n        let tileCol = Math.floor((nw.x - X0) / tileWidth),\r\n            tileRow = -Math.floor((nw.y - Y0) / tileWidth)\r\n\r\n        let url = `http://gis.sinica.edu.tw/tgos/file-exists.php?img=${layer}-png-${ident}-${tileCol}-${tileRow}`\r\n\r\n        return url\r\n    },\r\n\r\n    setParams(params, noRedraw) {\r\n        L.extend(this.wmtsParams, params)\r\n        if (!noRedraw) {\r\n            this.redraw()\r\n        }\r\n        return this\r\n    },\r\n\r\n    getDefaultMatrix() {\r\n        /**\r\n         * the matrix3857 represents the projection\r\n         * for the google coordinates.\r\n         */\r\n        let matrixIds3857 = new Array(22)\r\n        for (let i = 0; i < 22; i++) {\r\n            matrixIds3857[i]= {\r\n                identifier: `${i}`,\r\n                topLeftCorner: new L.LatLng(20037508.3428, -20037508.3428)\r\n            }\r\n        }\r\n        return matrixIds3857\r\n    }\r\n})\r\n\r\nL.tileLayer.wmts = (url, options) => {\r\n    return new L.TileLayer.WMTS(url, options)\r\n}\r\n"],"file":"tgos-wmts.js"}