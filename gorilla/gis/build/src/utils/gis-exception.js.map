{"version":3,"sources":["../../../src/utils/gis-exception.js"],"names":["GIS_ERROR","INVALID_ARGS","INVALID_TYPE","INVALID_ID","GisException","code","target","msg","errCode","errTarget","errMsg"],"mappings":";;;;;;;;AAAA;;;;;;;;AASO,IAAMA,SAAS,GAAG;AACrB;AACAC,EAAAA,YAAY,EAAE,cAFO;AAGrB;AACAC,EAAAA,YAAY,EAAE,cAJO;AAKrB;AACAC,EAAAA,UAAU,EAAE;AANS,CAAlB;AASP;;;;;;;;;;;AAQO,SAASC,YAAT,CAAsBC,IAAtB,EAA4BC,MAA5B,EAAoCC,GAApC,EAAyC;AAC5C,OAAKC,OAAL,GAAeH,IAAf;AACA,OAAKI,SAAL,GAAiBH,MAAjB;AACA,OAAKI,MAAL,GAAcH,GAAd;AACH","sourcesContent":["/**\r\n * For GIS developer only.\r\n *\r\n * DO NOT utilize it as error message for user.\r\n *\r\n * @file   This file defines error codes and GIS error object.\r\n * @author Liszt\r\n */\r\n\r\nexport const GIS_ERROR = {\r\n    // For args with wrong data type or format\r\n    INVALID_ARGS: 'INVALID_ARGS',\r\n    // For args with invalid symbol/event/info/layout type.\r\n    INVALID_TYPE: 'INVALID_TYPE',\r\n    // For symbols/tracks with wrong Id format or duplicated Id\r\n    INVALID_ID: 'INVALID_ID'\r\n}\r\n\r\n/**\r\n * A GisException object. Now, we show error by log.warn()\r\n *\r\n * @param {String}  code     Error code. See GIS_ERROR.\r\n * @param {type}    target   Where the error happens\r\n * @param {String}  msg      Error message\r\n *\r\n */\r\nexport function GisException(code, target, msg) {\r\n    this.errCode = code\r\n    this.errTarget = target\r\n    this.errMsg = msg\r\n}"],"file":"gis-exception.js"}