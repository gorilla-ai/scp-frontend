{"version":3,"sources":["../../../src/utils/merge-helper.js"],"names":["mergeProps","sources","symbolProps","props","symbolData","_","isArray","length","mergeWith","objVal","srcVal","key","srcStr","replace","split","concat","isPlainObject","isBoolean","className","chain","uniq","join","value","forEach","prop","isFunction","propKey","iconUrl","content","omitBy","isNil"],"mappings":";;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;AAcO,SAASA,UAAT,OAAwDC,OAAxD,EAAiE;AAAA,MAAtCC,WAAsC,QAA5CC,KAA4C;AAAA,MAAtBC,UAAsB;;AACpE,MAAIC,mBAAEC,OAAF,CAAUL,OAAV,KAAsBA,OAAO,CAACM,MAAR,KAAmB,CAA7C,EAAgD;AAC5C,WAAO,EAAP;AACH;;AAED,MAAMJ,KAAK,GAAGE,mBAAEG,SAAF,4BAAY,EAAZ,4BAAmBP,OAAnB,IAA4B,UAACQ,MAAD,EAASC,MAAT,EAAiBC,GAAjB,EAAyB;AAC/D,QAAIA,GAAG,KAAK,WAAR,IAAuBD,MAA3B,EAAmC;AAC/B,UAAME,MAAM,GAAGF,MAAM,CAACG,OAAP,CAAe,SAAf,EAA0B,GAA1B,EAA+BC,KAA/B,CAAqC,GAArC,CAAf;AACAL,MAAAA,MAAM,GAAGA,MAAM,IAAI,EAAnB;AACAA,MAAAA,MAAM,GAAGJ,mBAAEU,MAAF,CAASN,MAAT,EAAiBG,MAAjB,CAAT;AAEA,aAAOH,MAAP;AACH,KAND,MAOK,IAAIJ,mBAAEW,aAAF,CAAgBP,MAAhB,KAA2BJ,mBAAEW,aAAF,CAAgBN,MAAhB,CAA/B,EAAwD;AACzD,6CAAWD,MAAX,GAAsBC,MAAtB;AACH,KAFI,MAGA;AACD,aAAOL,mBAAEY,SAAF,CAAYP,MAAZ,IAAsBA,MAAtB,GAAgCA,MAAM,IAAID,MAAjD;AACH;AACJ,GAda,GAAd;;AAgBA,MAAIN,KAAK,CAACe,SAAV,EAAqB;AACjBf,IAAAA,KAAK,CAACe,SAAN,GAAkBb,mBAAEc,KAAF,CAAQhB,KAAK,CAACe,SAAd,EAAyBE,IAAzB,GAAgCC,IAAhC,CAAqC,GAArC,EAA0CC,KAA1C,EAAlB;AACH;;AAEDjB,qBAAEkB,OAAF,CAAUpB,KAAV,EAAiB,UAACqB,IAAD,EAAOb,GAAP,EAAe;AAC5B,QAAIN,mBAAEoB,UAAF,CAAaD,IAAb,CAAJ,EAAwB;AACpBrB,MAAAA,KAAK,CAACQ,GAAD,CAAL,GAAaa,IAAI,iCAAKpB,UAAL,GAAoBF,WAApB,EAAjB;AACH;AACJ,GAJD,EAzBoE,CA+BpE;AACA;;;AACAG,qBAAEkB,OAAF,CAAU,CAAC,OAAD,EAAU,SAAV,EAAqB,OAArB,EAA8B,MAA9B,CAAV,EAAiD,UAAAG,OAAO,EAAI;AACxD,QAAIvB,KAAK,CAACuB,OAAD,CAAL,IAAkB,CAACrB,mBAAEW,aAAF,CAAgBb,KAAK,CAACuB,OAAD,CAArB,CAAvB,EAAwD;AACpDvB,MAAAA,KAAK,CAACuB,OAAD,CAAL,GAAiBA,OAAO,KAAK,MAAZ,GACD;AAAEC,QAAAA,OAAO,EAACxB,KAAK,CAACuB,OAAD;AAAf,OADC,GAED;AAAEE,QAAAA,OAAO,EAACzB,KAAK,CAACuB,OAAD;AAAf,OAFhB;AAGH;AACJ,GAND;;AAQA,SAAOrB,mBAAEwB,MAAF,CAAS1B,KAAT,EAAgBE,mBAAEyB,KAAlB,CAAP;AACH","sourcesContent":["/**\r\n * A helper for merging global and self props\r\n *\r\n * @file   Functions related to symbol creation, update, and getter.\r\n * @author Liszt\r\n */\r\n\r\nimport _ from 'lodash'\r\n\r\n/**\r\n * This is for merging global and local symbolProps or trackProps. Only object-props will be merged here,\r\n * As for other props, the former ones will be replaced by the later ones if they have different type.\r\n * E.g.,\r\n * {heatmap:{radisu:100}} and {heatmap:{intensity:0.5}} will merge as {heatmap:{radisu: 100,intensity:0.5}}\r\n * while {heatmap:{radisu:100}} and {heatmap:true} will merge as {heatmap:true} because the inputs have different type,\r\n * later props heatmap replace the former one\r\n *\r\n * @param {Object} props    Props to be merged with.\r\n * @param {Object} sources  All source props.\r\n *\r\n * @return {Object}    The merged props\r\n */\r\n\r\nexport function mergeProps({props:symbolProps, ...symbolData}, sources) {\r\n    if (_.isArray(sources) && sources.length === 0) {\r\n        return {}\r\n    }\r\n\r\n    const props = _.mergeWith({}, ...sources, (objVal, srcVal, key) => {\r\n        if (key === 'className' && srcVal) {\r\n            const srcStr = srcVal.replace(/\\s{2,}/g, ' ').split(' ')\r\n            objVal = objVal || []\r\n            objVal = _.concat(objVal, srcStr)\r\n\r\n            return objVal\r\n        }\r\n        else if (_.isPlainObject(objVal) && _.isPlainObject(srcVal)) {\r\n            return {...objVal, ...srcVal}\r\n        }\r\n        else {\r\n            return _.isBoolean(srcVal) ? srcVal : (srcVal || objVal)\r\n        }\r\n    })\r\n\r\n    if (props.className) {\r\n        props.className = _.chain(props.className).uniq().join(' ').value()\r\n    }\r\n\r\n    _.forEach(props, (prop, key) => {\r\n        if (_.isFunction(prop)) {\r\n            props[key] = prop({...symbolData, ...symbolProps})\r\n        }\r\n    })\r\n\r\n    // These four types of props will be normalized as object here\r\n    // icon will become { iconUrl:'...' } and label/tooltip/popup will be {content:'...'}\r\n    _.forEach(['label', 'tooltip', 'popup', 'icon'], propKey => {\r\n        if (props[propKey] && !_.isPlainObject(props[propKey])) {\r\n            props[propKey] = propKey === 'icon' ?\r\n                            { iconUrl:props[propKey] } :\r\n                            { content:props[propKey] }\r\n        }\r\n    })\r\n\r\n    return _.omitBy(props, _.isNil)\r\n}"],"file":"merge-helper.js"}